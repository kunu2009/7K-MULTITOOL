
'use client';

import * as React from 'react';
import { useActionState } from 'react';
import { useFormStatus } from 'react-dom';
import { scanUrlAction, VulnerabilityScannerState } from './actions';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { LegalDisclaimer } from '@/components/legal-disclaimer';
import { Loader2, ShieldAlert, HelpCircle, ShieldQuestion } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Badge } from '@/components/ui/badge';

const initialState: VulnerabilityScannerState = {
  data: null,
  message: null,
};

function SubmitButton() {
  const { pending } = useFormStatus();
  return (
    <Button type="submit" disabled={pending}>
      {pending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <ShieldAlert className="mr-2 h-4 w-4" />}
      {pending ? 'Simulating Scan...' : 'Scan URL'}
    </Button>
  );
}

const getSeverityBadgeVariant = (severity: string): 'destructive' | 'secondary' | 'outline' | 'default' => {
  switch (severity) {
    case 'Critical':
      return 'destructive';
    case 'High':
      return 'destructive';
    case 'Medium':
      return 'secondary';
    default:
      return 'outline';
  }
};
const getSeverityColorClass = (severity: string): string => {
    switch (severity) {
      case 'Critical':
        return 'border-red-500/50 bg-red-500/10 text-red-700 dark:text-red-300';
      case 'High':
        return 'border-orange-500/50 bg-orange-500/10 text-orange-700 dark:text-orange-300';
      case 'Medium':
        return 'border-yellow-500/50 bg-yellow-500/10 text-yellow-700 dark:text-yellow-300';
       case 'Low':
        return 'border-blue-500/50 bg-blue-500/10 text-blue-700 dark:text-blue-300';
      default:
        return 'border-gray-500/50 bg-gray-500/10 text-gray-700 dark:text-gray-300';
    }
  };

export default function VulnerabilityScannerPage() {
  const [state, formAction] = useActionState(scanUrlAction, initialState);

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><ShieldAlert className="h-6 w-6" /> Educational Vulnerability Scanner</CardTitle>
          <CardDescription>Simulate a vulnerability scan on a URL to learn about common web security issues.</CardDescription>
        </CardHeader>
        <CardContent>
          <form action={formAction} className="space-y-4">
            <div>
              <Label htmlFor="url">Target URL</Label>
              <Input id="url" name="url" placeholder="https://example.com" className="mt-1" required />
              {state.fieldErrors?.url && <p className="text-sm font-medium text-destructive mt-1">{state.fieldErrors.url.join(', ')}</p>}
            </div>
            <SubmitButton />
          </form>
        </CardContent>
      </Card>
      
       <Alert>
          <ShieldQuestion className="h-4 w-4" />
          <AlertTitle>This is a Simulation</AlertTitle>
          <AlertDescription>
            This tool does not perform a real vulnerability scan. It uses AI to predict potential weaknesses based on the type of URL provided. The results are for educational purposes to help you understand common web vulnerabilities.
          </AlertDescription>
        </Alert>

      {state.message && (
        <Alert variant="destructive">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{state.message}</AlertDescription>
        </Alert>
      )}

      {state.data && (
         <Card>
          <CardHeader>
            <CardTitle>Simulated Scan Results</CardTitle>
            <CardDescription>{state.data.summary}</CardDescription>
          </CardHeader>
          <CardContent>
            <Accordion type="single" collapsible className="w-full">
              {state.data.findings.map((finding, index) => (
                <AccordionItem value={`item-${index}`} key={index} className={`rounded-lg mb-2 px-4 border ${getSeverityColorClass(finding.severity)}`}>
                  <AccordionTrigger className="hover:no-underline">
                    <div className="flex items-center gap-4">
                      <Badge variant={getSeverityBadgeVariant(finding.severity)}>{finding.severity}</Badge>
                      <span className="font-semibold text-left">{finding.vulnerability}</span>
                    </div>
                  </AccordionTrigger>
                  <AccordionContent className="space-y-4 pt-2">
                    <div>
                        <h4 className="font-semibold mb-1">Description</h4>
                        <p className="text-sm text-muted-foreground">{finding.description}</p>
                    </div>
                    <div>
                        <h4 className="font-semibold mb-1">Recommendation</h4>
                        <p className="text-sm text-muted-foreground">{finding.recommendation}</p>
                    </div>
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          </CardContent>
        </Card>
      )}

      <LegalDisclaimer />
    </div>
  );
}
