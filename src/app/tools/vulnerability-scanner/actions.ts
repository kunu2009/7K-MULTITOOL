'use server';

import { vulnerabilityScanner } from '@/ai/flows/vulnerability-scanner';
import { type VulnerabilityScannerOutput } from '@/ai/schemas/vulnerability-scanner';
import { z } from 'zod';

const schema = z.object({
  url: z.string().url("Please enter a valid URL (e.g., https://example.com)."),
});

export type VulnerabilityScannerState = {
  data: VulnerabilityScannerOutput | null;
  message: string | null;
  fieldErrors?: {
    url?: string[];
  };
};

export async function scanUrlAction(prevState: VulnerabilityScannerState, formData: FormData): Promise<VulnerabilityScannerState> {
  const validatedFields = schema.safeParse({
    url: formData.get('url'),
  });

  if (!validatedFields.success) {
    return {
      data: null,
      message: 'Invalid input.',
      fieldErrors: validatedFields.error.flatten().fieldErrors,
    };
  }

  try {
    const result = await vulnerabilityScanner(validatedFields.data);
    return { data: result, message: null };
  } catch (error) {
    console.error(error);
    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';
    return { data: null, message: `An error occurred while simulating the vulnerability scan: ${errorMessage}` };
  }
}
